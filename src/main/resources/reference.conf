jmt {
  bwe {
    send-side {
      low-loss-threshold = 0.02
      high-loss-threshold = 0.1
      bitrate-threshold = 100 kbps

      loss-experiment {
        probability = 0
        low-loss-threshold = ${jmt.bwe.send-side.low-loss-threshold}
        high-loss-threshold = ${jmt.bwe.send-side.high-loss-threshold}
        bitrate-threshold = ${jmt.bwe.send-side.bitrate-threshold}
      }

      timeout-experiment {
        probability = 0
      }
    }
  }

  transceiver {
      recv {
        # The size of the queue that handles incoming rtp/rtcp packets. This is
        # a per-participant queue and it's where we temporarily store the
        # packets that the endpoint is sending, right after an srtp packet has
        # been received.
        #
        # Assuming 300pps for high-definition, 200pps for standard-definition,
        # 100pps for low-definition and 50pps for audio, this queue is fed
        # 650pps, so its size in terms of millis is 1024/650*1000 ~= 1575ms.
        queue-size=1024
      }

      send {
        # The size of the queue that handles outgoing rtp/rtcp packets. This is
        # a per-participant queue and it's where we temporarily store the
        # packets right after the ingress pipeline has run.
        #
        # Packets from all the other endpoints in a call end up in the send
        # queue.
        #
        # In a 100 participant call, assuming 300pps for the on-stage and
        # 100pps for low-definition, last-n 20 and 2 participants talking, so
        # 2*50pps for audio, this queue is fed 300+19*100+2*50 = 2300pps, so its
        # size in terms of millis is 1024/2300*1000 ~= 445ms.
        queue-size=1024
      }
  }

  pcap {
    # Whether the API to dynamically enable capturing unencrypted PCAP files
    # of media traffic is permitted.
    enabled=false
  }
}